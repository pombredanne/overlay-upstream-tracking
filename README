overlay-upstream-tracking: A tool for gentoo overlay maintenance

Copyright (C) 2013 Greogry M. Turner

This software may be used and resdistributed under the terms
of the GPL v2.  See COPYING for the gory details.

This is a work in progress.  As of its writing many of the
statements below are 'todo' items only and not yet implemented.
Also, while things are under development, I'm not bothering
to keep it up-to-date, so please read the following with a
big-ish grain of salt.

If you maintain some Gentoo overlays you have probably noticed
that although an overlay is easy to create, it's a royal pain
in the ass to maintian.  This is because, by and large, no
provision is made in the overlay framework to account for the
reality that upstream and overlay source code are often rapidly
evolving in tandem.

This makes it extremely difficult to keep track of when it is
neccesary to backport upstream changes into the overlay
code-base.  The primary goal of overlay-upstream-tracking is
to turn this problem on it's head, leveraging the capabilities
of the overlay's version-control system to make merging
upstream changes into overlay code-bases a breeze whenever
practically possible, or, at worst, only so hard as merging the
actual code.

Information flows thusly: (monospace font recommended):

+->[ upstream ]
|    |
|    v
|  [ upstream-tracking pseudo-overlay ]
|    |
|    v
| [ overlay ] 
|    |
|    v
+-[[ for-upstream overlays ]]

The for-upstream overlays might not get implemented but my thinking
is to make some way to export deltas from the overlay, in a format
suitable for easy consumption by the upstream repo.  I doubt they would be
maintained by overlay-upstream-tracking -- probably, they would just
be spit out upon request and otherwise ignored.  The upstream-tracking
pseudo-overlay is the proxy for upstream, and should be automatically
maintained by overlay-upstream-tracking (see below).  "upstream," of couse,
is simply the upstream repository -- presumably "gentoo-x86" or prefix.

The process of generating and applying commits to the upstream-tracking
pseudo-overlay will be automated according to a set of highly flexible
and configurable rules maintained at three levels: built-in, global, and
overlay, in a crude-but-hopefuly-practical rules specification language.

For now I'm looking to support git overlays only, but the Rules processing
code shouldn't make any assumptions about the VCS.  Eventually it would
hopefully be feasible to support multiple VCS or even non-version-controlled
overlays, i.e., using quilt.

Sound nifty?  I thought so too.  Just gotta implement it.  Drop me a line
or a merge request if you have any thoughts or suggestions!

enjoy,

-gmt

Greg Turner <gmt@be-evil.net>
